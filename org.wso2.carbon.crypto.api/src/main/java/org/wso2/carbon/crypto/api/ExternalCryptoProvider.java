/*
 * Copyright (c) 2018, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 * WSO2 Inc. licenses this file to you under the Apache License,
 * Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations
 * under the License.
 *
 *
 *
 */

package org.wso2.carbon.crypto.api;

import java.security.PrivateKey;
import java.security.cert.Certificate;

/**
 * The service contract for external crypto providers.
 * <p>
 * <p>
 * An external crypto provider is used for crypto needs which a WSO2 server come cross,
 * when communicating with an external entity.
 * <p/>
 * <p>
 * One example is signing a message which goes out from a WSO2 server.
 * Another example is decrypting an encrypted message sent by an external entity to a WSO2 server.
 * </p>
 * <p>
 * An implementation which uses a Java key store file to carryout above tasks,
 * is a sample implementation of this contract.
 * </p>
 * <p><b>
 * As per the design decisions, the contract should never be amended in a way that the secret keys are
 * returned to the caller.
 * </b></p>
 */
public interface ExternalCryptoProvider {

    /**
     * Computes and returns the signature of given data.
     *
     * @param data                    The data whose signature is calculated.
     * @param algorithm               The signature + hashing algorithm to be used in signing.
     * @param javaSecurityAPIProvider The Java Security API provider.
     * @param cryptoContext           The context information was used to find discovery information about the private key.
     * @param privateKeyInfo          The information which used to retrieve the private key.
     *                                If this information is not sufficient the {@link CryptoContext} will be used to
     *                                get more information.
     * @return The digital signature of given data.
     * @throws CryptoException If something unexpected happens during the signing operation.
     */
    byte[] sign(byte[] data, String algorithm, String javaSecurityAPIProvider, CryptoContext cryptoContext,
                PrivateKeyInfo privateKeyInfo) throws CryptoException;

    /**
     * Computes and returns the cleartext of the given ciphertext.
     *
     * @param ciphertext              The ciphertext to be decrypted.
     * @param algorithm               The signature + hashing algorithm to be used in signing.
     * @param javaSecurityAPIProvider The Java Security API provider.
     * @param cryptoContext           The context information which was used to find discovery information about the private key.
     * @param privateKeyInfo          The information which used to retrieve the private key.
     *                                If this information is not sufficient the {@link CryptoContext} will be used to
     *                                get more information.
     * @return The cleartext
     * @throws CryptoException If something unexpected happens during the decryption operation.
     */
    byte[] decrypt(byte[] ciphertext, String algorithm, String javaSecurityAPIProvider, CryptoContext cryptoContext,
                   PrivateKeyInfo privateKeyInfo) throws CryptoException;

    /**
     * Computes and returns the ciphertext of the given cleartext.
     *
     * @param data                    The cleartext to be encrypted.
     * @param algorithm               The signature + hashing algorithm to be used in signing.
     * @param javaSecurityAPIProvider The Java Security API provider.
     * @param cryptoContext           The context information which was used to find discovery information about the certificate
     *                                of the external entity.
     * @param certificateInfo         The information which is needed to retrieve the certificate.
     *                                If this information is not sufficient the {@link CryptoContext} will be used to
     *                                get more information.
     * @return The cleartext
     * @throws CryptoException If something unexpected happens during the encryption operation.
     */
    byte[] encrypt(byte[] data, String algorithm, String javaSecurityAPIProvider, CryptoContext cryptoContext,
                   CertificateInfo certificateInfo) throws CryptoException;

    /**
     * Verifies whether given signature of the given data was generated by a trusted external party.
     *
     * @param data                    The data which was the signature generated on.
     * @param signature               The signature bytes of data.
     * @param algorithm               The signature + hashing algorithm to be used in signing.
     * @param javaSecurityAPIProvider The Java Security API provider.
     * @param cryptoContext           The context information which is needed to discover the public key of the external entity.
     * @param certificateInfo         The information which is needed to retrieve the certificate.
     *                                If this information is not sufficient the {@link CryptoContext} will be used to
     *                                get more information.
     * @return true if signature can be verified, false otherwise.
     * @throws CryptoException If something unexpected happens during the signature verification.
     */
    boolean verifySignature(byte[] data, byte[] signature, String algorithm, String javaSecurityAPIProvider,
                            CryptoContext cryptoContext, CertificateInfo certificateInfo) throws CryptoException;

    /**
     * Returns the {@link Certificate} based on the given {@link CryptoContext}
     *
     * @param cryptoContext   The context information which is used to discover the public key of the external entity.
     * @param certificateInfo The information which is needed to retrieve the certificate.
     *                        If this information is not sufficient the {@link CryptoContext} will be used to
     *                        get more information.
     * @return The {@link Certificate} relates with the given context.
     * @throws CryptoException If something unexpected happens during certificate discovery.
     */
    Certificate getCertificate(CryptoContext cryptoContext, CertificateInfo certificateInfo) throws CryptoException;

    /**
     * Returns the {@link PrivateKey} based on the given {@link CryptoContext}
     *
     * @param cryptoContext  The context information which is used to discover the applicable private key.
     * @param privateKeyInfo The information which is needed to retrieve the private key.
     *                       If this information is not sufficient, the {@link CryptoContext} will be used to
     *                       get more information.
     * @return The {@link Certificate} relates with the given context.
     * @throws CryptoException If something unexpected happens during private key discovery.
     */
    PrivateKey getPrivateKey(CryptoContext cryptoContext, PrivateKeyInfo privateKeyInfo) throws CryptoException;
}
